<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Av8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AZgC/wCZAv8AmQL/AJkC/wCZ
        Av8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wKYA/cNlw5WGZcXNBuYGl8jmiJcF5cXaQmY
        CpYDmATuAJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8BmAL/AJkC/wCZ
        Av8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AZkC/weXB9UblxtQNZcxNSyY
        LEUimCEtDZcOdASYBeoAmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wGY
        Av8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wOYBO8HlwecDpcNSh6Y
        Hx9EmEQILpYvGSyUKzQwky8SD5cPXgOZBPQAmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZ
        Av8AmQL/AZkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wGZAv8EmAXRDpYMTSqT
        JgUclRoAAAAAAEqhSQAtlykALZYpECiVJjspmCgNFpgWiwaYB98BmQL/AJkC/wCZAv8AmQL/AJkC/wCZ
        Av8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wKYA/kDmAXkCJcImhCX
        DiUAmgAAMpApAAAAAAAAAAAAAAAAAFyxXgAAaQAAKZgpOiyYLA8tlyw0GpgaOwiYCaMDmQTnApkD+QCZ
        Av8AmQL/AJkC/wCZAv8AmQL/AJkC/wCYAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8HmAi7D5gPYhWX
        FDwgmhwZIJ0cFB+dGxYfnRsWIJ0bFiCdGxYfnRsXGZwWGBqbGBoolyk/K5gvDCiXJjwmmiMhJJsfGxaY
        FEAQlw9lB5gIxACZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wCZAv8AmQL/AJkC/wOZ
        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
        A///wAP//8AD///AA///wAP//8AD///AA/8=
</value>
  </data>
</root>